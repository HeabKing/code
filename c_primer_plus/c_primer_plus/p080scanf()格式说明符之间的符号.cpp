// 说明scanf()格式说明符之间的符号
// 1. 除%c外, 其他的格式说明符都是从一个字符开始(如果为空白字符则一直跳, 跳到非空白开始读入)到另一个空格结束, 并且放回最后一个空格回缓冲区(不考虑字段宽度的影响)
// 2. 除空格外, 其他的字符都是告诉我们应该键入一个一模一样的字符
// 3. 键入的空格告诉我们跳过下一个输入项之前的任何空格(但是除了%c以外, 其他的格式说明符都会自动跳过他们遇到的第一个空字符)

// scanf()返回成功读入的项目的个数, 如果没有读入则返回0, 如果遇到文件结尾则会返回'EOF', 通常为-1

#include <stdio.h>
int main(void)
{
	int i, j;
	char ch;

	//scanf ("%d, %d", &i, &j);
	//printf ("--%d--%d--", i, j);
	// .输入12 , 3不正确, 分析: 首先可以认为开始为一个空格, 然后第一个%d读入12然后读入12后面空格并还回输入流, 然后','并没有跳过空格的功能
	//      所以, 输入位置一直停留在12后面的空格不能继续
	// .输入12,12 正确, 分析: 首先读入一个"12,", 然后直接开始用%d去匹配此时的输入位置后面的一个12, 直接开始读入字符
	// .输入12,   12 正确, 分析: 首先读入一个"12,", 然后直接开始用%d去匹配此时的输入位置后面的一个12前面的空格, 跳过空格, 直接开始读入字符'1''2'
	
	scanf ("%d , %d", &i, &j);
	printf ("--%d--%d--", i, j);
	// .输入12 , 3 正确
	// .输入12,3正确
	// .输入12,   3正确
	
	//scanf ("%d%c", &i, &ch);
	//printf ("--%d--%c--", i, ch);
	// .输入12[Enter], 输出的时候为--12--[回车]--
	// .输入12[space][enter], 输出为--12--[空格]--

	//scanf ("%d %c", &i, &ch);
	//printf ("--%d--%c--", i, ch);
	// .输入12[Enter], 将会一直停留在输入界面
	// .输入12[space][enter], 将会一直停留在输入界面

	return 0;
}