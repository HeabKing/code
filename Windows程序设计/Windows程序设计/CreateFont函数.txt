函数功能：该函数创建一种有特殊性的逻辑字体，此逻辑字体可以在后面被任何设备选择。
    函数原型：HFONT CreateFont(
					int nHeight, 
					int nWidth, 
					int nEscapement, 
					int nOrientation, 
					int fnWeight, 
					DWORD fdwltalic, 
					DWORD fdwUnderline, 
					DWORD fdwStrikeOut, 
					DWORD fdwCharSet, 
					DWORD fdwOutputPrecision, 
					DWORD fdwClipPrecision, 
					DWORD fdwQuality, 
					DWORD fdwPitchAndFamily, 
					LPCTSTR lpszFace)；

    参数：

    nHeight：指定字体的字符单元或字符的逻辑单位高度，字符的高度值（也被称为em高度）是指字符单元高度值减去内部标头值。字体映射器以如下方式解释nHeight指定的值，各值含义为：

    >0：字体映射器转换这个值以设备单位，并和已有字体的单元高度相匹配。

    0：字体映射器转换在选择匹配时用一个缺省的高度值。

    <0：字体映射器转换这个值到设备单位，并将它的绝对值和已有字体的字符高度相匹配。

    比较所有的高度，字体映射器选择不超过要求大小的最大字体。

    此映射当字体第一次被使用时发生。

    对于MM_TEXT映射方式，可以用下面的公式为一种指定了点大小的字体确定高度：

    nHeight=-MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY),72)

    nWidth：指定所要求字体的字符的逻辑单位的平均宽度。如果此值为0，字体映射器选择一个closest match值，closest match值是由比较当前设备的特征系数与可使用字体的数字化特征系数之差的绝对值而确定的。

    nEscapement：指定移位向量和设备X轴之间的一个角度，以十分之一度为单位。移位向量平行于正文行的基线。

    Windows NT：当图形设备设置为GM_ADVANCED时，可以不依赖字符串的字符的定位角而指定字符串的移位角。

    当图形模式被设置为GM_COMPATIBLE时，nEscapement同时指定移位角和定位角，可以设置nEscapement和nOrientation为相同的值。

    Windows 95：nEscapement同时指定移位角和定位角，可设置nEscapement和nOrientation为相同的值。

    nOrientation：指定每个字符的基线和设备X轴之间的角度。

    FnWeight：在0到1000之间指定字体的权值，如400表示标准体，700表示黑（粗）体，如果此值为0，则使用缺省的权值。

    为方便定义，可使用如下值：

    FW_DONTCARE：0；FW_THIN；100；FW_EXTRALIGHT；200；FW_ULTRALIGHT；200；FW_LIGHT；300；

    FW_NORMAL：400；FW_REGULAR；400；FW_MEDIUM；500；FW_SEMIBOLD；600；FW_DEMIBOLD；600；

    FW_BOLD：700；FW_EXTRABOLD；800；FW_ULTRABOLD；800；FW_HEAVY；900；FW_BLACK；900。

    fdwItalic：如果设置为TRUE则指定斜体。

    fdwUnderline：如果设置为TRUE，则指定加下划线的字全。

    fdwStrikeOut：如果设置为TRUE，则strikeout指定字体。

    fdwCharSet：指定字符集，下列值是预定义的：

    ANSI_CHARSET; BALTIC_CHARSET; CHINESEBIG5_CHARSET; DEFAULT_CHARSET;

    EASTEUROPE_CHARSET; GB2312_CHARSET; GREEK_CHARSET; HANGUL_CHARSET; MAC_CHARSET; OEM_CHARSET; RUSSIAN_CHARSET; SHIFTJIS_CHARSET;

    SYMBOL_CHARSET; TURKISH_CHARSET。

    韩国Windows：JOHAB_CHARSET；

    中东地区Windows：HEBREW_CHARSSET; ARABIC_CHARSET

    泰国Windows：THAI_CHARSET

    OEM_CHARSET指定的字符集与操作系统有关。

    可以使用DEFAULT_CHARSET值来允许字体的名字和大小来充分描述逻辑字体。如果指定的字体名不存在，任何字符集的字体都可以替代指定的字体，所以应该小心地用DEFAULT_CHARSET来避免不期望的结果出现。

    操作系统中存在其他字符集的字体。如果一个应用程序用一种未知字符集的字体，则应用程序不会试图去翻译或解释用那种字体写出来的字符串。

    在字体映射过程中此参数很重要。为确保获得一致的结果，指定一个特殊的字符集。如果在lpszFace参数中指定了一个字体名，确定fdwCharSet值与由lpszFace指定的字体字符集是否匹配。

    fdwOutputPrecision：指定输出精度，输出精度义输出与要求的字体高度、宽度、字符定位、移位、字符间距和字符类型的匹配程序，它可取下列值之一：

    OUT_CHARACTER_PRECIS；未用。

    OUT_DEFAULT_PRECIS：指定缺省的字体映射器状态。

    OUT_DEVICE_PRECIS：指示字体映射器在当系统里有多种字体使用同一个字体使用同一个名字时选择一种设备字体。

    OUT_OUTLINE_PRCIS：在Windows NT中此值指示字体映射器从TrueType和其他基于边框的字体中选择。

    OUT_RASTER_PRECIS：指示字体映射器在当系统里有多种字体使用同一个名字时选择一种光栅字体。

    OUT_STRING_PRECIS：此值没有被字全映射器使用，但是当扫描字体被列举时作为返回值。

    OUT_STROKE_PRECIS：在Windows NT中此值没有被字体映射器使用，但是当TrueType字体、其他基于边框的字体和向量字体被列举时，作为返回值。

    Windows 95：此值没有被字体映射器使用，但是当TrueType字体或向量字体被列举时，作为返回值。

    OUT_TT_ONLY_PRECIS：指示字体映射器仅从TrueType字体中选择，如果系统中没有安装TrueType字体，则字体映射返回缺省状态。、

    OUT_TT_PRECIS：指示字体映射器在当系统里有多种同名的字体时选择一种TrueType字体。

    当操作系统含有多种与指定名字同名的字体时，应用程序可以使用OUT_DEVICE_PRECIS,OUT_RASTER_PRECIS和OUT_TT_PRECIS值来控制字体映射器如何选择一种字体，例如，如果操作系统含有名字Symbol的光栅和TrueType两种字体，指定OUT_TT_PRECIS使字体映射器选择TrueType方式。指定OUT_TT_ONLY_PRECIS使字体映射器选择一种TrueType字体，尽管这会给TrueType字体换一个名字。

    fdwClipPrecision；指定裁剪精度，裁剪精度定义如何裁剪部分超出裁剪区的字符，它可取一个或多个下列值：

    CLIP_DEFAULT_PRECIS：指定缺省裁剪状态。CLIP_CHARACTER_PRECIS：未用。

    CLIP_STROKE_PRECIS：未被字体映射器使用，但是当光栅字体、向量字体或TrueType字体被列举时作为返回值。在Windows环境下，为保证兼容性，当列举字体时这个值总被返回。

    CLIP_MASK：未用。CLIP_EMBEDDED：要使用嵌入式只读字体必须使用此标志。

    CLIP_LH_ANGLES：当此值被使用时，所有字体的旋转依赖于坐标系统的定位是朝左的还是朝右的。

    如果未使用此值，设备字体总是逆时针方向旋转，但其他字体的旋转依赖于坐标系统的定向。要得到更多关于坐标系统定向的信息，参见参数orientation。

    CLIP_TT_ALWAYS：未用。

    fdwQuality：指向输出质量，输出质量定义GDI如何仔细地将逻辑字体属性与实际物理字体属性相匹配。它可取下列值之一：

    DEFAULT_QUALITY：字体的外观不重要。

    DRAFT_QUALITY：字体外观的重要性次于使用PROOF_QUALITY时，对GDI光栅字体，缩放比例是活动的，这意味着多种字体大小可供选择，但质量可能不高，如果有必要，粗体、斜体、下划线、strikeout字体可被综合起来使用。

    PROOF_QUALITY：字符质量比精确匹配逻辑字体字体属性更重要。对GDI扫描字体，缩放比例是活动的，并选择最接近的大小。尽管当使用PROOF_QUALITY时，选择字体大小并不完全匹配，但字体的质量很高，并没有外观上的变形。如果有必要，粗体、斜体、下划线、strikeout字体可被综合起来使用。

    fdwPitchAndFamily：指定字体间距和字体族，低端二位指定字体的字符间距，它可取下列值之一：

    DEFAULT_PITCH；FIXED_PITCH; VARIABLE_PITCH

    高端四位指定字体族，可取下列值之一：

    FF_DECORATIVE：新奇的字体，如老式英语（Old English）。FF_DONTCARE：不关心或不知道。

    FF_MDERN：笔划宽度固定的字体，有或者无衬线。如Pica、Elite和Courier New。

    FF_ROMAN：笔划宽度变动的字体，有衬线。如MS Serif。

    FF_SCRIPT：设计成看上去象手写体的字体。如Script和Cursive。

    FF_SWISS：笔划宽度变动的字体，无斜线。如MS Sans Serif。

    应用程序可以用运算符OR将字符间距和字体族组合起来给fdwPitchAndFamily赋值。

    字体族描述一种字体的普通外观，当所有的精确字样都不能使用时，可用它们来指定字体。

    lpszface：指向指定字体的字样名的、以\0结束的字符串指针，字符串的长度不能超过32个字符（包括字符\0），函数EnumFontFamilies可用来列举所有当前可用字体的字样名。

    如果lpszFace为NULL或指向一个空串，GDI使用能匹配其他属性的第一种字体。

    返回值：如果函数调用成功，返回值是一种逻辑字体句柄；如果函数调用失败，返回值为NULL。

    Windows NT：若想获得更多错误信息，请调用GetLastError函数。

    备注：当一种字体不再使用时，可用DeleteObject来删除。

    为保护那些提供字体给Windows和Windows NT的卖主的版权，基于Win32的应用程序总是列出所选择字体的准确名字。由于不同的系统会使用不同的字体，不要认为所选择字体就是要求的字体。例如，如果要求名叫Palatino的字体，但系统没提供那样一种字体，则字体映射器将会以一种不同名但有相似属性的字体取而代之。系统总是将用户选择的字体名报告出来。

    速查：Windows NT：3.1及以上版本；Windows：95及以上版本；Windows CE：不支持；头文件：wingdi.h；库文件：gdi32.lib；Unicode：在Windows NT环境下以Unicode和ANSI两种方式实现。
	

           
 


SHIFT + ALT + HOME垂直选择到最前面  CTRL + SHIFT + PAGE UP选择至本页前面  CTRL + SHIFT + PAGE DOWN选择至本页后面  CTRL + END文档定位到最后  CTRL + HOME文档定位到最前  CTRL + A全选  
CTRL + W选择当前单词    
CTRL + G转到…  
CTRL + K, CTRL + P上一个标签  CTRL + K, CTRL + N下一个标签  ALT + F10调试-ApplyCodeChanges  CTRL + ALT+ Break停止调试  CTRL + SHIFT + F9 取消所有断点  CTRL + F9允许中断  
CTRL + SHIFT + F5调试-重新开始  F5运行调试  
CTRL + F5运行不调试  F10跨过程序执行  F11单步逐句执行  CTRL + J列出成员  
CTRL + PAGE DOWN下一个视图  CTRL + B格式-粗体  
CTRL + SHIFT + T格式-文字缩进  调试快捷键  F6: 生成解决方案  Ctrl+F6: 生成当前项目  F7: 查看代码  
Shift+F7: 查看窗体设计器  F5: 启动调试  
Ctrl+F5: 开始执行(不调试)  Shift+F5: 停止调试  Ctrl+Shift+F5: 重启调试  F9: 切换断点  
Ctrl+F9: 启用/停止断点  Ctrl+Shift+F9: 删除全部断点  F10: 逐过程  
Ctrl+F10: 运行到光标处  F11: 逐语句  编辑快捷键  
Shift+Alt+Enter: 切换全屏编辑  Ctrl+B,T / Ctrl+K,K: 切换书签开关  Ctrl+B,N / Ctrl+K,N: 移动到下一书签  Ctrl+B,P: 移动到上一书签  



 


Ctrl+B,C: 清除全部标签  Ctrl+I: 渐进式搜索  
Ctrl+Shift+I: 反向渐进式搜索  Ctrl+F: 查找  
Ctrl+Shift+F: 在文件中查找  F3: 查找下一个  Shift+F3: 查找上一个  Ctrl+H: 替换  
Ctrl+Shift+H: 在文件中替换  
Alt+F12: 查找符号(列出所有查找结果)  Ctrl+Shift+V: 剪贴板循环  
Ctrl+左右箭头键: 一次可以移动一个单词  
Ctrl+上下箭头键: 滚动代码屏幕，但不移动光标位置。  Ctrl+Shift+L: 删除当前行  
Ctrl+M,M: 隐藏或展开当前嵌套的折叠状态  Ctrl+M,L: 将所有过程设置为相同的隐藏或展开状态  Ctrl+M,P: 停止大纲显示  Ctrl+E,S: 查看空白  Ctrl+E,W: 自动换行  Ctrl+G: 转到指定行  
Shift+Alt+箭头键: 选择矩形文本  Alt+鼠标左按钮: 选择矩形文本  Ctrl+Shift+U: 全部变为大写  Ctrl+U: 全部变为小写  代码快捷键  
Ctrl+J / Ctrl+K,L: 列出成员  
Ctrl+Shift+空格键 / Ctrl+K,P: 参数信息  Ctrl+K,I: 快速信息  
Ctrl+E,C / Ctrl+K,C: 注释选定内容  Ctrl+E,U / Ctrl+K,U: 取消选定注释内容  Ctrl+K,M: 生成方法存根  Ctrl+K,X: 插入代码段  Ctrl+K,S: 插入外侧代码  
F12: 转到所调用过程或变量的定义  窗口快捷键  
Ctrl+W,W: 浏览器窗口  Ctrl+W,S: 解决方案管理器  Ctrl+W,C: 类视图  Ctrl+W,E: 错误列表  Ctrl+W,O: 输出视图  Ctrl+W,P: 属性窗口  Ctrl+W,T: 任务列表  Ctrl+W,X: 工具箱  Ctrl+W,B: 书签窗口  



 


Ctrl+W,U: 文档大纲  Ctrl+D,B: 断点窗口  Ctrl+D,I: 即时窗口  Ctrl+Tab: 活动窗体切换  Ctrl+Shift+N: 新建项目  Ctrl+Shift+O: 打开项目  Ctrl+Shift+S: 全部保存  Shift+Alt+C: 新建类  Ctrl+Shift+A: 新建项  