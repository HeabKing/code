1.	多任务是指操作系统能够并行运行多个线程的能力, 多线程是指一个程序在其自身内部也有支持多任务的能力, 程序能把自己分成多个执行"线程", 他们看起来好像是在并行运行;
2.	程序构架应该这样: 主线程创建程序所需要的所有窗口及窗口过程, 并处理这些窗口消息. 任何其他的线程只是简单的后台运算, 除了和主线程通信外, 他们不和用户打交道;
3.	主线程处理用户输入(和其他消息), 在此过程中或许会生成其他二级线程, 这些额外的线程处理跟用户不相关的任务;
4.	在一个特定的程序中, 所有的线程都是同一个进程的一部分, 因此他们共享进程的资源(内存打开的文件等).
	因为线程共享程序内存, 所以他们也共享静态变量. 然而, 每个线程都有自己的堆栈, 所以每个线程的自动变量都是唯一的, 每个线程有他自己的处理器状态(和数学协处理器状态), 这些在线程切换时会被自动保存和恢复;
	PS: 线程本地存储TSL(TreadLocalStorage), 让两个或多个线程使用同一个函数, 但是每个线程使用她们自己的静态变量, 这种线程内的独特静态变量就叫做线程本地存储;
5.	创建一个执行线程:
		1.	API: hThread = CreateThread(&security_attributes, dwStackSize, ThreadProc, pParam, dwFlags, &idThread);	// 第一个参数&security_attributes是一个指向SECURITY_ATTRIBUTES结构的指针, 98中没有, NT中NULL即可; 第二个参数dwStackSize表示线程栈的初始大小, 0为默认值, 不管哪种情况, windows都会根据需要动态调整线程栈的大小; 第三个参数ThreadProc是一个函数指针, 指向你的线程函数, 这个函数可以任意命名但是必须有以下格式: DWORD WINAPI ThreadProc(PVOID pParam); 第四个参数pParam是传递给ThreadProc的参数, 利用这个参数在主线程和二级线程之间共享数据; 第五个参数dwFlags通常为0, 如果被设置为CREATE_SUSPENDED表示这个线程在创建以后不被立即执行, 这个线程将保持在挂起状态直到调用ResumeThread函数为止; 第六个参数&idThread是一个指针, 指向接收新线程的ID值得变量
		2.	C的运行时库函数: hThread = _beginthread(ThreadProc, uiStackSize, pParam);void __cdecl ThreadProc(void * pParam)
6.	休眠的好处:
		Sleep(int)	在休眠的时间中, 这个线程被挂起, 不会分配时间片(当然, 该线程在系统处理计时器滴答时仍需要很少时间来检查是否应该继续执行该线程), 传入参数0给Sleep函数使得线程的现有时间段作废;
7.	程序的共享问题:
		比如:	两个程序要同时读写一个文件, 这种情况下, 操作系统提供文件共享机制和记录锁定来帮助解决问题;
8.	线程的共享问题:
		比如:	一个线程正在更新一个或多个数据, 而另一个线程正在使用这些数据, 有时这会引起问题, 有时则不会(值得指出的是, 操作系统只能在机器指令之间从一个线程切换到另一个线程, 如果只是耽搁整数被共享, 则由于通常对该变量的改变是一个指令完成的, 所以一般不会有问题);
				如果线程在更新的过程中(还没跟新完)切换到了另一个也使用这个数据的线程, 这时, 使用这些数据的线程会看到不一致的数据, 这样的结果是数据冲突, 并可能导致程序崩溃, 解决方案是使用临界区;
9.	临界区:
		临界区就是一段不会被中断的代码;
		CRITICAL_SECTION cs;	临界区对象, 这是一个全局变量, 他的字段只能被Windows内部使用, 我们"不要改动甚至读取它";
		两个线程不能同时拥有同一个临界区, 如果一个线程进入了临界区, 下一个调用EnterCriticalSection(&cs)来进入同一临界区的对象会被挂起, 直到第一个线程调用LeaveCriticalSection(&cs)离开临界区才会返回, 这时第二个线程会拥有这个临界区;
10.	使用临界区的注意事项:
		1.	如果要在主线程中使用临界区, 你应该非常小心, 如果一个二级线程在临界区停留过久它会阻碍主线程很长时间, 通常, 二级线程应该只使用临界区来把结构中的字段复制到他自己的局部变量;
		2.	临界区的一个局限是他只能在同一个!进程(不是线程)!中使用, 如果你要协调两个共享某个资源的进程(比如共享内存), 你应该使用一个不常用的类型---"互斥对象(mutex object)", "mutex"代表"mutual exclusion(互斥)";
如果一个程序的线程正在更新或者访问共享内存或其他资源, 你应该防止他被打断;
11.	KillThread函数只有在正常退出没法实现的时候才使用, 这主要是为了防止资源(比如分配的内存)无法释放, 如果内存在退出时没有被释放, 他就会一直占据那块内存, 线程不是进程: 因为同一进程里分配的资源会被所有线程共享, 所以线程退出时资源不会被自动释放, 好的程序设计要求线程在结束时释放由它分配的资源
12.	每次执行蛮力计算的时候都创建一个新的线程, 并在结束的时候终止这个线程, 显然, 我们需要一种更加有效的线程使用方式
				1.	一种思路是在程序的整个生命周期只创建一并保持一个计算线程, 并在需要的时候才调用这个线程, 这正是 "事件" 的用武之地;
				2.	一个事件对象有两种状态: 已被触发(设置)或未被触发(复位)
				3.	创建一个事件对象: hEvent = CreateEvent(&sa, fManula, fInitial, pszName);
				4.	&sa, 一个指向SECURITY_ATTRIBUTES结构的指针, pszName只在事件对象在进程间共享时才有意义, 在一个进程中, 这些参数通常被设置为NULL. fInitial指示事件的触发状态
					setEvent(hEvent) 触发一个已有事件的对象 ResetEvent(hEvent)解除一个事件对象的触发状态 WaitForSingleObject(hEvent, dwTimeout) 等待一个事件被触发, 如果事件对象已经被触发, 函数立即返回, 否则, 函数就会等待dwTimeout毫秒, dwTimeOut被设置成INFINITE, 函数就会一直到事件对象被触发才返回, 如果最开始CreateEvent函数的fManual参数被设置成false, 那么函数在WaitForSingleObject返回后, 事件对象的状态会被自动设置为未触发, 这样就不用调用ResetEvent函数去重置事件对象状态