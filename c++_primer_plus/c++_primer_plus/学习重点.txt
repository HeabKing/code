类是用户定义的一种数据类型   . 描述数据他能表示的信息       . 描述他能进行的操作
c++两种发送消息的方式: .使用类方法(本质上就是函数调用)       . 重新定义运算符 (如cout用的<<)
main()函数的返回值表示程序运行成功返回非零则表示程序运行出错
关键字是计算机语言中的词汇
面向对象编程(oop)的本质是设计并拓展自己的数据类型
.被称为成员运算符, cout.put()表示通过对象cout使用成员函数put()
在c++中(而不是c中)可以用const值来声明数组的长度
c++进行类型转换的三种情况:
	1. 不同算数类型进行赋值运算的时候
	2. 表达式中包含不同的类型时
	3. 将参数传递给函数时
数据对象: 为数据项分配的一块内存
static buding静态联编: 编译时给数组分配内存   dynamic buding动态联编: 在程序运行时创建数组(动态数组dynamic array)
静态数组 和 动态数组 的区别: .静态数组名是一个常量指针, 而动态数组名是一个变量指针
	. 静态数组名使用sizeof返回的是数组的字节数, 而动态的数组名使用sizeof返回的是指针的字节数原因是在这种情况下, 
	c和c++不会将常量指针解释为地址(另一个重要内容时对数组取地址的时候, 数组名也不会解释为其地址)
"string";这是一段引号括起来的字符串常量, 其中隐式包含了结尾'\0'  ar[] = "string";自然也会把'\0'赋值过去
vector是动态数组的替代品  array是定长数组的替代品
c++写控制语句与函数的习惯: for (); switch (); 这种的是关键字后面加一个空格, 因为for是关键字, 后面即使加了空格他同样
	不是函数, 所以他加上一个空格时他在视觉上区别于函数, 而函数则不加这个空格
c++的逗号运算符允许在c++只允许放一个语句的地方放上两个表达式, 逗号运算符不是逗号间隔符(int i, j;)中的是间隔符
通常, 编写清晰, 容易理解的代码比使用语言的晦涩特性来显示自己的能力更有用
通常编译器使用三块内存, 一块用于静态变量, 一块用于动态变量, 一块用于自动变量

第十章:
类是用户定义的类型的定义. 类声明 指定了数据将会如何储存, 同时指定了用来访问和操纵这些数据的方法(类成员函数)
抽象: 以类方法的公有接口对类对象执行的操作, 这是抽象
数据隐藏: 类的数据成员可以是私有的(默认值), 这意味着只能通过成员函数来访问这些数据, 这是数据隐藏
封装: 实现的具体细节(如数据的表示和方法的代码)都是隐藏的, 这是封装
类和对象之间的关系: 类定义了一种类型, 包括如何使用它. 对象时一个变量(或是其他如由new生成的数据对象), 并根据类定义被创建和使用, 类和对象之间的关系同标准类型与其他变量之间的关系相同