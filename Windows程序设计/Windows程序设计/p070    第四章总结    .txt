1. 声明数组的[]内不能是变量, 因为变量时程序运行的时候给值的, 而定义数组的时候内存的分配是在编译阶段进行的, 可以使用new运算符避开这种限制;
2. 通过1可以想象, 程序在运行前先在栈中分配好所有需要的空间, 在程序执行的时才在有执行到相应语句的时候进行赋值; 这也是栈中变量定义的时候值是随机数的原因, 因为栈中的变量时在程序运行前分配的, 此时程序没有能力进行赋值, 而堆中的动态变量是在程序运行过程中进行赋值的, 所以可以将他的值在分配内存的时候就给0;
3. char str[10] = "0123456"; 这样经过初始化以后, 元素7 8 9都会被写成'\0';
4. cin.getline() 读取一行将'\n'替换成'\0', cin.get()读取一行, 将'\n'留在输入队列, cin.get(void)是跟getchar()一个效果;
5. cin >> string读取一行;
6. C++允许在声明结构变量的时候省略struct, 这样结构标记的用法与基本类型就相同了, 这强调的是, 结构声明定义了一种新的类型(有那么点类的味道了);
7. 共用体(union): 是一种数据格式, 它能够储存不同的数据类型, 但是只能同时存储其中的一种类型;  由于共用体每次只能存储一个值, 因此他必须有足够的空间来储存最大的成员值, 所以, 共用体的长度为其最大成员的长度;  共用体的用途之一是, 当数据项实用两种或者更多的格式的时候(但是不会同时使用), 可以节省空间;
8. enum提供了另一种创建符号常量(枚举量)的方式, 这种方式可以代替const;  在不进行强制类型转换的情况下, 只能将枚举量赋给枚举变量;  对于枚举, 只定义了赋值运算符, 没有为枚举定义算数运算符;  枚举量是整型, 可以被提升为int, 但是int不能自动转换成枚举类型; int color = blue; // 可以    band(枚举变量) = 3;  // 不可以, int不能自动变成枚举类型  int color = 3 + red;  // 可以
9. 可以创建多个值相同的枚举量 enum{zero, null = 0, one, numero_uno = 1};  zero == 0 == null, one == 1 == numero_uno;
10. 数据对象: 这里的对象不是面向对象中的对象, 而是一样东西, 数据对象指的是为该数据项分配的内存块;
11. 内存泄露: 被分配到的内存再也无法使用了;
12. 静态联编(static binding): 在编译的时候给数组分配内存; 动态联编(dynamic binding): 在程序运行时给数组分配内存(动态数组(dynamic array));
13. 一般数组名是首元素的地址, 但是在一下情况下例外:
	13.1 sizeof(数组名) 这时C++不会将数组名解释为地址, sizeof得到的是数组的长度;
	13.2 对数组取地址时, 数组名不会被解释为其地址; 对数组名应用地址运算符时, 得到的是整个数组的地址;
14. 如果给cout提供一个字符的地址, 那么他会从该字符开始打印, 直道遇到空字符为止;
15 const char * pStr = "daxionggege";  这里的const必须加上; char strArray[] = "daxionggege"; 这里是声明了一个数组, 将字面值赋给了数组里面, 所以可以使用cin对其进行更改;
16. C++一共有四种存储方式:
	16.1 自动存储   (栈中保存)
		16.1.1 函数内部定义的常规变量;
		16.1.2 函数被调用的时候产生, 函数结束时消亡;
		16.1.3 自动变量是一个局部变量, 存储在栈中;
	16.2 静态存储   (不在栈中, 不在堆中)
		16.2.1 定义方式有两种: 1. 函数外部定义; 2. 函数内部定义的时候加上static关键字;
		16.2.2 存在于程序的整个生命周期;
	16.3 动态存储   (堆中保存)
		16.3.1 使用new和delete分配内存;
		16.3.2 堆和用于保存静态变量和自动变量的内存是分开的;
		16.3.3 在new语句开始生命周期, 在delete结束生命周期;
17. 数组的替代品:
	17.1 模板类vector  
		17.1.1 类似string类(也是动态数组), 长度可变, 可以在任何位置添加数据;
		17.1.2 vector<int> vi;  定义了一个长度为0的vector;   vector<double> vd(n); 定义了一个包含n个double的vector, n可以是常量也可以是变量(数组和array中不能是变量);
		17.1.3 vi.at(10);这比直接使用vi[10]安全, 但是进行边界检查的代价是牺牲效率;
		17.1.4 vi.begin()  vi.end()vector的开始和结束;
	17.2 模板类array(C++11)
		17.1.1 静态数组, 同数组的效率一样, 长度固定;
		17.1.2 array<int, 5> ai;  定义了一个5个int的数组;
