1. 基本类型: 整数和浮点数	复合类型: 数组, 字符串, 指针, 结构和类;
2. C++对于名称长度没有要求, C99保证前63个字符有意义;
3. 对类型名(如:int)使用sizeof运算符时, 应该将名称放在括号中, 但是对变量名使用sizeof运算符时, 括号是可选的;
4. -1在16位无符号整型int中是65536 - 1 = 65535; c++确保了无符号类型的这种行为, 但是不保证符号整形超越限制(上溢和下溢)时不出错;
5. int通常被视为对目标计算机而言最"自然的长度", 自然长度是计算机处理起来最有效率的长度;
6. 如果处理的数大于3w可以考虑使用long, 如果大于20亿则可以考虑使用long long;
7. 整型字面值(常量)指的是显示的书写的常量, 如212或12776;
8. 控制符: endl dec(十进制) hex(十六进制) oct(八进制);
9. cout.put() .被称为成员运算符, 意思是通过cout对象来使用put()函数;
#10. 可以基于字符的八进制或十六进制来使用转移序列在表示字符'A'的时候, 可以使用'A', 也可以使用'\101'(oct), 还可以使用'\x41'(hex);
11. const 定义常量比 #define  的几个优点:
	1. const明确指定了类型 const int a = 3;
	2. const定义的常量可以使用C++的作用域规则;
	3. 可以将const用于更加复杂的类型, 如结构和数组;
12. d.dddE+n指的是将小数点向右移动n位, 而d.dddE-n指的是将小数点向左移动n位置; 之所以称之为浮点数, 就是因为小数点可以移动;
13. 有效位是指数字中有意义的位, 如31564有效位有5个, 32000有效位有2个, 因为经过四舍五入精确到了千位, 后面的三个零仅仅相当于占位符;
14. c++保证float的有效位至少为32, 精度有效位至少为6(FTL_DIG), double的有效位至少为48, 精度有效位至少为15(DBL_DIG);
15. cout 默认最多输出小数点后六位, 有无意义的0的话自动不显示;
16. 两个运算符的优先级相同并且!同时用于同一个操作数!的时候, C++看运算符的结合性, 从左到右的结合性意味着首先用左侧的, 从右到左则意味着先用右侧的; 如: a = 120 / 4 * 3; 则是先除后乘
17. 初始化列表:  C++11将使用大括号的初始化称为初始化列表, 因为这种初始化常用于给复杂的数据类型提供列表, 他对类型转换的要求更为严格, 具体的说, 列表初始化不允许缩窄(即变量类型可能无法表示赋给他的值). 列如, 不允许将浮点类型转换成整形;
18. 表达式中的类型转换:
	1. 自动类型转换:
		1. 出现时便会自动转换:
			如: unsigned short a = 40000; unsigned short b = 40000; unsigned short c = a + b; cout << c << endl; // 值为(80000 - 65536) cout << a + b; // 值为80000 在这里, a b一出现便被转换成自然长度(int), 然后将计算结果int转换成short类型; 当然, 如果short和int长度一样的话, unsigned short将会被转换成unsigned int, 以保证不会损失精度;
		2. 与其他类型同时出现在表达式中时将被转换:
			向上类型转换
	2. 强制类型转换:
		1. (typename)value, C语言的传统转换方式, typename(value)纯粹的C++转换方式;
		2. C++引入的四个强制类型转换符:
			1. static_cast<typename>value; 他比传统的类型转换符更为严格;
19. 在变量声明中, 如果使用关键字auto, 而不指定变量的类型, 编译器将把变量的类型设置成与初始值相同; auto a = 100.0; // a is double
	注意: auto不要滥用, 他是为复杂类型 (如标准模板库(STL)中的类型) 而设计的;